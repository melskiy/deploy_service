import json

import streamlit as st
import requests



def user():
    chat_container = st.container(height=300, key='user')
    with chat_container:
        st.markdown("""
                   <style>
                   .chat-box {
                       max-height: 300px;
                       overflow-y: auto;
                   }
                   </style>
                   <div class="chat-box">
                   """, unsafe_allow_html=True)

        for msg in reversed(
                st.session_state['chat_history']):  # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, —á—Ç–æ–±—ã –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—ã–ª–∏ –Ω–∞–≤–µ—Ä—Ö—É
            st.markdown(
                f'<div class="chat-message"><b>{msg["sender"]}</b>: {msg["serial_number_check_result"]}<br>{msg["completeness_check_result"]} <br> {msg["equipment_name_check_result"]} <br> <br></div>',
                unsafe_allow_html=True)

    st.subheader("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    path = 'https://fulsomely-sensuous-zorilla.cloudpub.ru'
    # –§–æ—Ä–º–∞ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–º—ã –∏ —Ç–µ–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    with st.form(key='user_form'):
        user_subject = str(st.text_input("–¢–µ–º–∞"))
        user_body = str(st.text_area("–¢–µ–ª–æ"))
        submit_button = st.form_submit_button(label="–û—Ç–ø—Ä–∞–≤–∏—Ç—å")

        if submit_button:
            url = f'{path}/email/handle'

            data = {'title': user_subject, 'body': user_body}
            headers = {"Content-Type": "application/json"}
            response = requests.post(url, headers=headers, data=json.dumps(data)).json()

            if response['serial_number_check_result']['success']:
                serial_number_check_result = '‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–∏–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —É—Å–ø–µ—à–Ω–∞'
            else:
                serial_number_check_result = '‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–∏–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å:\n' + \
                                             response['serial_number_check_result']['text']

            if response['completeness_check_result']['success']:
                completeness_check_result = '‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ—Ç—ã —É—Å–ø–µ—à–Ω–∞'
            else:
                completeness_check_result = '‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ—Ç—ã –Ω–µ —É–¥–∞–ª–∞—Å—å:\n' + response['completeness_check_result'][
                    'text']

            if response['equipment_name_check_result']['success']:
                equipment_name_check_result = '‚úÖ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞–π–¥–µ–Ω–æ'
            else:
                equipment_name_check_result = '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏: \n' + \
                                              response['equipment_name_check_result']['text']

            if response['type'] == 'to_agent':
                st.session_state['chat_history_operator'].append(
                    {"sender": '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', "subject": user_subject, "body": user_body,
                     "serial_number": response['serial_number_check_result']['data'],
                     "type_of_equipment": response['classification_result']['equipment_type'],
                     "point_of_failure": response['classification_result']['point_of_failure']})


            st.session_state['chat_history'].append(
                {
                    "sender": 'Botü§ñ \n',
                    "serial_number_check_result": serial_number_check_result,
                    "completeness_check_result": completeness_check_result,
                    "equipment_name_check_result": equipment_name_check_result
                }
            )

            st.rerun()
